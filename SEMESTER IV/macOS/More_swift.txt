//Ex 1.1
func minValue(_ value1: Int, _ value2: Int) -> Int {
    if value1 > value2 {
        return value2
    } else {
        return value1
    }
}

//Ex 1.2 
func lastDigit(_ number: Int) -> Int{
return abs(number) % 10
}

//Ex 1.3 
func divides(_ dividend: Int, _ divisor: Int) -> Bool{
    if(dividend % divisor == 0)
        {return true}
        else
        {return false}
}

func countDivisors(_ number: Int)-> Int{
    var counter = 0;
    for i in 1...number
    {
        if(divides(number,i) == true)
        {counter+=1}
        
    }
    return counter
}

func isPrime(_ number: Int) -> Bool
{
    if(countDivisors(number) == 2)
    {
        return true;   
    }
    
    return false
}
    
print("Ex1:")
let minVal = minValue(10, 17)
print(minVal)

let lastdigit = lastDigit(1234567)
print(lastdigit)

print(divides(7, 3)) // false - 7 is not divisible by 3
print(divides(8, 4)) // true - 8 is divisible by 4


print(countDivisors(1)) // 1 - 1
print(countDivisors(10)) // 4 - 1, 2, 5 and 10
print(countDivisors(12)) // 6 - 1, 2, 3, 4, 6 and 12


print(isPrime(3)) // true
print(isPrime(8)) // false
print(isPrime(13)) // true
print("\nEx2:")
//Ex.2

func smartBart(_ number: Int, _ f:() -> Void)
{
    for _ in 1...number
    {
        f()
    }
}

smartBart(5)
{
    print("I will pass this course with best mark, because Swift is great!")
}

let numbers = [10, 16, 18, 30, 38, 40, 44, 50]

print(numbers.filter{$0%4==0})

print(numbers.reduce(Int.min, { max($0, $1) }))

var strings = ["Gdansk", "University", "of", "Technology"]

print(strings.reduce("") { $0 == "" ? $1 : "\($0) \($1)"})

var numbers2 = [1, 2 ,3 ,4, 5, 6]
numbers2 = numbers2.filter{$0 % 2 == 1}
numbers2 = numbers2.map{$0 * $0}
var sum = numbers2.reduce(0){$0 + $1}
print(numbers2.map { "\($0)" }.joined(separator: " + ") + " -> \(sum)")
//Ex.3
print("\n Ex3:")

func minmax (_ a: Int, _ b: Int) -> (min: Int, max: Int)
{
    let min = min(a,b)
    let max = max(a,b)
    return (min, max)
}

print(minmax(15,-5))

var stringsArray = ["gdansk", "university", "gdansk", "university", "university", "of", "technology", "technology", "gdansk", "gdansk"]
var countedStrings = [(String, Int)]()
countedStrings = stringsArray.reduce(into: [:]) { counts, string in
    counts[string, default: 0] += 1
}.map { ($0.key, $0.value) }

print(countedStrings)

//Ex.4
print("\n Ex4:")

enum Day:Int
{
    case Monday = 1
    case Tuesday = 2
    case Wednesday = 3
    case Thursday = 4
    case Friday = 5
    case Saturday = 6
    case Sunday = 7
    
       func displayEmoji() -> String {
        switch self {
            case .Monday: return "🤮"
            case .Tuesday: return "🤢"
            case .Wednesday: return "😡"
            case .Thursday: return "🤬"
            case .Friday: return "😎"
            case .Saturday: return "😴"
            case .Sunday: return "🥺"
        }
    }
    
}

let today = Day.Monday
print("Today is \(today) \(today.displayEmoji())")



